#!/usr/bin/python
# -----------------------------------------------------------------------------
# Copyright Stephen Stebbing 2016. http://telecnatron.com/
# Released under the MIT License
# -----------------------------------------------------------------------------
""" """

import csv
import sys

# Globals
error_detected = 0
# track which buttons have been assigned
assigned_buttons=[]
assigned_re=[]
assigned_leds=[]
# PCINT ISRs (ie 0,1,2) from which the mcui_re_isr() function needs to be called.
re_isr_vect=[0,0,0]

# Functions

def print_suffix():
    print 
    print '''
#endif // ifdef MCUI_DEFS
'''.strip()

def print_prefix():
    print '''
#ifndef MCUI_DEFS
#define MCUI_DEFS
// -----------------------------------------------------------------------------
// Copyright Stephen Stebbing 2016. http://telecnatron.com/
// Released under MIT License.
//
// Definitions for mcui.c MCU common user interface library on atmegaXX8
// Generated by mcui.py utility.
// -----------------------------------------------------------------------------

'''.strip();

def pin2pc(port, pin):
    # map PortPin to PCINT number (which corresponds to PCMSKx, PCIEx, and PCINx_vect ISR)
    pin2pc_tab = {
        'B0': ['PCINT0', '0'],
        'B1': ['PCINT1', '0'],
        'B2': ['PCINT2', '0'],
        'B3': ['PCINT3', '0'],
        'B4': ['PCINT4', '0'],
        'B5': ['PCINT5', '0'],
        'B6': ['PCINT6', '0'],
        'B7': ['PCINT7', '0'],
        'C0': ['PCINT8', '0'],
        'C1': ['PCINT9', '1'],
        'C2': ['PCINT10', '1'],
        'C3': ['PCINT11', '1'],
        'C4': ['PCINT12', '1'],
        'C5': ['PCINT13', '1'],
        'C6': ['PCINT14', '1'],
        'D0': ['PCINT16', '2'],
        'D1': ['PCINT17', '2'],
        'D2': ['PCINT18', '2'],
        'D3': ['PCINT19', '2'],
        'D4': ['PCINT20', '2'],
        'D5': ['PCINT21', '2'],
        'D6': ['PCINT22', '2'],
        'D7': ['PCINT23', '2']
    }
    pp=str(port)+str(pin);
    return pin2pc_tab[pp]

def print_re_isr():
    print
    print '''
// Macros for rotary encoder PCINT ISRs. These should be called from the 
// corresponing ISR, eg: ISR(PCINT2_vect){ MCUI_RE_PCINT2_vect();}
'''.strip();

    for i in range(0,3):
        sys.stdout.write("#define MCUI_RE_PCINT{}_vect()".format(i))
        if(re_isr_vect[i]==1):
            sys.stdout.write(' mcui_re_isr()');
        print
    print


def print_error(msg, line):
    print '\n#error at line {} of input: {}\n'.format(str(line),str(msg))
    sys.stderr.write("Error at line {} of input: ".format(str(line))+str(msg));
    error_detected=1;


def do_button(type, device, port, pin):
    """ """
    info=pin2pc(port,pin)

    # keep track of rotary encoder switches so ISR macros can be generated later by print_re_isr()
    if (type == 'Rotary encoder'):
        re_isr_vect[int(info[1])]=1

    pcint=info[0];
    pcmsk='PCMSK'+str(info[1]);
    pcie='PCIE'+str(info[1]);
    portin='PIN'+str(port);

    ddr="DDR"+str(port)
    pin = "PIN"+str(pin)
    pout="PORT"+str(port)
    print "\n// {} button ".format(type), device, ", ", pout, pin, pcint, pcmsk, pcie
    print "// Init pin: set as input, enable pull-up, set mask to enable pcint on this pin, enable interrupt"
    print '#define MCUI_INIT_{}() {} &= ~_BV({}); {} |= _BV({}); {} |= _BV({}); PCICR |= _BV({})'.format(str(device), ddr, pin, pout, pin, pcmsk, pcint, pcie)
    print "// Read pin. Returns 0 if not asserted, non-zero if asserted. Physical pin is active low."
    print '#define MCUI_READ_{}()  (!({} & _BV({})))'.format(str(device), portin, pin)


def do_led(device, port, pin, anode):
    """ """
    assigned_leds.append(device)
    print "\n// {} PORT{} PIN{}".format(device, port, pin)
    print '#define MCUI_{}_INIT() (DDR{} |= _BV(PIN{}))'.format(device, port, pin) 
    print '#define MCUI_{}_TOGGLE() (PORT{} ^= _BV(PIN{}))'.format(device, port, pin)
    if(anode == 'A'):
        print '#define MCUI_{}_ON()  (PORT{} |= _BV(PIN{}) )'.format(device, port, pin)
        print '#define MCUI_{}_OFF() (PORT{} &= ~_BV(PIN{}) )'.format(device, port, pin)
    else:
        print '#define MCUI_{}_ON()  (PORT{} &= ~_BV(PIN{}) )'.format(device, port, pin)
        print '#define MCUI_{}_OFF() (PORT{} |= _BV(PIN{}) )'.format(device, port, pin)


# -----------------------------------------------------------------------------
if __name__ == '__main__':

    # keep count of the number of buttons that are defined
    num_buttons=0;

    try:
        reader = csv.reader(sys.stdin)
        line=0;
        print_prefix()
        for row in reader:
            # eg row: ['LED_R', ' B1']
            line += 1;

            # skip comments and blank lines
            if len(row) == 0:
                continue
            if row[0][0] == '#':
                continue;
           
            device = row[0]
            pin = '';
            port = '';
            if( len(row) > 1 and row[1] != ''):
                row[1]= row[1].strip();
                port = row[1][0];
                pin = row[1][1];
            else:
                continue;

            ( devtype, index ) = tuple(filter(None, device.split("_") ))
        
#            print "line: ", line, ", device: ", device, ", pin: ",pin, ", port: ", port, ", devtype: ", devtype, ", index: ", index

            if(devtype == 'RE'):
                do_button('Rotary encoder',device, port, pin);
#                print "#define RE_READ_{}() MCUI_READ_RE_{}()".format(pin, pin)
                assigned_re.append(int(index))
            elif( devtype == 'PB'):
                do_button('Push',device, port, pin);
                assigned_buttons.append(int(index))
                num_buttons += 1;
            elif(devtype == 'LED'):
                if(len(row) > 2 ):
                    anode=row[2].strip();
                if(anode == ''):
                    anode='A';
                do_led(device, port, pin, anode);
            else:
                print_error("Invalid device type specified: "+str(device),line);


        # Generate init and read macros for buttons
        print "\n// Initialise push buttons"
        sys.stdout.write('#define MCUI_INIT_PB() ')
        if( len(assigned_buttons)):
            count = 0;
            for  b in assigned_buttons:
                sys.stdout.write(" \\\n    MCUI_INIT_PB_{}()".format(b))
                if count < len(assigned_buttons)-1:
                   sys.stdout.write(';');
                count += 1;
        print 

        print "\n// Read push buttons"
        sys.stdout.write('#define MCUI_READ_PB(b) ')
        count = 0
        for b in assigned_buttons:
            sys.stdout.write(' \\\n    if(MCUI_READ_PB_{}()) b |= _BV({}); else b &= ~_BV({})'.format(b,b,b)) 
            if count < len(assigned_buttons)-1:
                sys.stdout.write(';');
            count += 1;
        print

        # Generate init and read macros for rotary encoder
        print "\n// Initialise rotary encoder buttons"
        sys.stdout.write('#define MCUI_INIT_RE() ')
        if( len(assigned_re)):
            count = 0;
            for  b in assigned_re:
                sys.stdout.write(" \\\n    MCUI_INIT_RE_{}() ".format(b))
                if count < len(assigned_re)-1:
                   sys.stdout.write(';');
                count += 1;
            print 


        # Generate master macros for LEDs
        # init
        print "\n// Initialise LED(s)"
        sys.stdout.write('#define MCUI_LED_INIT() ');
        if( len(assigned_leds) ):
            count = 0;
            for b in assigned_leds:
                sys.stdout.write(" \\\nMCUI_{}_INIT() ".format(b))
                if count < len(assigned_leds)-1:
                   sys.stdout.write(';');
                count += 1;
        # on
        print "\n// Turn LED(s) on.";
        sys.stdout.write('#define MCUI_LED_ON() ');
        if( len(assigned_leds) ):
            count = 0;
            for b in assigned_leds:
                sys.stdout.write(" \\\nMCUI_{}_ON() ".format(b))
                if count < len(assigned_leds)-1:
                   sys.stdout.write(';');
                count += 1;
        print
        #off
        print "\n// Turn LED(s) off.";
        sys.stdout.write('#define MCUI_LED_OFF() ');
        if( len(assigned_leds) ):
            count = 0;
            for b in assigned_leds:
                sys.stdout.write(" \\\nMCUI_{}_OFF() ".format(b))
                if count < len(assigned_leds)-1:
                   sys.stdout.write(';');
                count += 1;
        print
        # toggle
        print "\n// Toggle LED(s).";
        sys.stdout.write('#define MCUI_LED_TOGGLE() ');
        if( len(assigned_leds) ):
            count = 0;
            for b in assigned_leds:
                sys.stdout.write(" \\\nMCUI_{}_TOGGLE() ".format(b))
                if count < len(assigned_leds)-1:
                   sys.stdout.write(';');
                count += 1;
        print



        # Master init
        print "\n// Master init - initialises all buttons including re"
        print "#define MCUI_INIT() MCUI_INIT_RE(); MCUI_INIT_PB()"

        print "\n// Number of push buttons that are in use"
        print "#define MCUI_NUM_BTNS "+str(num_buttons)

        print_re_isr();
        print_suffix();

        
    except:
        print_error("Error detected",line)
        raise

    if(error_detected):
        sys.stdout.write("Errors were detected")


            


